/**
 * Download utilities for generated content
 */

export interface DownloadOptions {
  includeImages?: boolean;
  format?: 'html' | 'zip';
  filename?: string;
}

/**
 * Captures the current state of a page with generated content
 */
export function captureGeneratedContent(document: Document): string {
  // Clone the document
  const clonedDoc = document.cloneNode(true) as Document;
  
  // Remove the generatetext.js script and data attributes
  const scripts = clonedDoc.querySelectorAll('script[src="/generatetext.js"]');
  scripts.forEach(script => script.remove());
  
  // Remove data-generatetext attributes from all elements
  const elementsWithData = clonedDoc.querySelectorAll('[data-generatetext]');
  elementsWithData.forEach(element => {
    element.removeAttribute('data-generatetext');
    element.removeAttribute('data-system');
  });
  
  // Remove loading states and animation classes
  const loadingElements = clonedDoc.querySelectorAll('.animate-pulse');
  loadingElements.forEach(element => {
    element.classList.remove('animate-pulse');
  });
  
  // Add a comment indicating this is generated content
  const htmlElement = clonedDoc.documentElement;
  const comment = clonedDoc.createComment(`
Generated by DeepSite - ${new Date().toISOString()}
This HTML contains AI-generated content and is ready for deployment.
Original dynamic content has been replaced with static generated content.
`);
  htmlElement.insertBefore(comment, htmlElement.firstChild);
  
  return `<!DOCTYPE html>\n${htmlElement.outerHTML}`;
}

/**
 * Downloads the captured content as an HTML file
 */
export function downloadAsHTML(content: string, filename: string = 'generated-website.html') {
  const blob = new Blob([content], { type: 'text/html;charset=utf-8' });
  const url = URL.createObjectURL(blob);
  
  const link = document.createElement('a');
  link.href = url;
  link.download = filename;
  link.style.display = 'none';
  
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  
  URL.revokeObjectURL(url);
}

/**
 * Extracts all image URLs from the content
 */
export function extractImageUrls(content: string): string[] {
  const imgRegex = /<img[^>]+src=["']([^"']+)["'][^>]*>/gi;
  const urls: string[] = [];
  let match;
  
  while ((match = imgRegex.exec(content)) !== null) {
    urls.push(match[1]);
  }
  
  return [...new Set(urls)]; // Remove duplicates
}

/**
 * Downloads an image and returns it as a blob
 */
export async function downloadImage(url: string): Promise<{ blob: Blob; filename: string }> {
  const response = await fetch(url);
  if (!response.ok) {
    throw new Error(`Failed to download image: ${url}`);
  }
  
  const blob = await response.blob();
  const urlParts = url.split('/');
  const filename = urlParts[urlParts.length - 1] || 'image';
  
  return { blob, filename };
}

/**
 * Creates a ZIP file with HTML and images
 */
export async function createZipPackage(
  htmlContent: string, 
  filename: string = 'generated-website'
): Promise<void> {
  // Import JSZip dynamically
  const JSZip = (await import('jszip')).default;
  const zip = new JSZip();
  
  // Extract image URLs
  const imageUrls = extractImageUrls(htmlContent);
  const imageMap = new Map<string, string>();
  
  // Download all images
  const imagePromises = imageUrls.map(async (url, index) => {
    try {
      const { blob, filename: originalFilename } = await downloadImage(url);
      const extension = originalFilename.split('.').pop() || 'jpg';
      const localFilename = `images/image-${index + 1}.${extension}`;
      
      zip.file(localFilename, blob);
      imageMap.set(url, localFilename);
      
      return { url, localFilename };
    } catch (error) {
      console.warn(`Failed to download image: ${url}`, error);
      return null;
    }
  });
  
  await Promise.all(imagePromises);
  
  // Replace image URLs in HTML with local paths
  let updatedHtml = htmlContent;
  imageMap.forEach((localPath, originalUrl) => {
    updatedHtml = updatedHtml.replace(new RegExp(originalUrl, 'g'), localPath);
  });
  
  // Add the HTML file
  zip.file(`${filename}.html`, updatedHtml);
  
  // Add a README
  const readme = `# Generated Website Package

This package contains your AI-generated website with all assets.

## Contents:
- ${filename}.html - Your generated website
- images/ - All images used in the website

## Deployment:
1. Extract all files to your web server
2. Open ${filename}.html in a web browser
3. All images are included and referenced locally

Generated by DeepSite on ${new Date().toISOString()}
`;
  
  zip.file('README.md', readme);
  
  // Generate and download the ZIP
  const zipBlob = await zip.generateAsync({ type: 'blob' });
  const url = URL.createObjectURL(zipBlob);
  
  const link = document.createElement('a');
  link.href = url;
  link.download = `${filename}.zip`;
  link.style.display = 'none';
  
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  
  URL.revokeObjectURL(url);
}
